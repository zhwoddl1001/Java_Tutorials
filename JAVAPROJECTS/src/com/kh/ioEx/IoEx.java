package com.kh.ioEx;
/*
* IO 란?
* Input = 입력 / OutPut = 출력 약자
* 컴퓨터에서 데이터를 입력받고, 출력하는 과정을 의미
* 파일, 네트워크, 메모리 등 여러 소스에서 데이터를 읽거나 쓰는 작업
* 
* 입력(Input)
*   데이터 소스를 읽어오는 작업
*   ex) 파일, 키보드 입력,네트워크 연결 등
* 
* 출력(Output)
*     데이터를 다른 목적지로 보내는 작업
*   ex) 콘솔 출력, 파일 쓰기, 네트워크로 데이터 전송 등
*
*  패키지(폴더)는 대표적으로 두가지 패키지(폴더) 존재
*  1. java.io 패키지(폴더)
*   전통적인 입출력 방식으로 Stream(스트림)을 사용해서 데이터를 처리
*   InputStream / OutputStream      : byte 단위 데이터 처리
*   Reader      /  Writer           : 문자 단위 데이터 처리
*   File                            : 파일 및 디렉토리(폴더)를 다루는 클래스
*   BufferedReader / BufferedWriter : 효율적으로 한 줄씩 문자 입출력 처리
* 
*  2. java.nio 패키지(폴더)
*    New IO 의 약자로, 더 효율적이고 비동기적인 데이터 처리 지원
*    Path  / Files : 파일 및 디렉토리(폴더) 작업
*    ByteBuffer    : byte 데이터를 저장 및 읽기
*    Channels      : 비동기 데이터 전송을 위한 채널
* */

/*
* IO의 기본 개념
* Stream(스트림)
*  데이터를 한 방향으로 흐르게 하는 통로
*  Buffer로 모여진 데이터를 처리하는 역할
*  
* Buffer(버퍼)
*     입출력 성능을 향상시키기 위해 데이터를 일시적으로 저장하는 메모리 공간
*     버퍼링 중 = 데이터를 모으는 중
*     
* File IO     (파일 입출력)
*   파일을 읽고 쓰는 작업
* 
* Standard IO (표준 입출력)
*   콘솔이나 키보드에서 데이터를 입력받거나 출력
*   ex) System.in(입력)       /       System.out(출력)
* */

/*
* 특성                IO                  NIO
* 데이터 단위         스트림 기반           버퍼기반
* 작업 방식           동기적 작업           비동기적 작업 지원
* 처리 속도           상대적으로 느림        상대적으로 빠름
* 유연성              비교적 단순           더 복잡한 구조 지원
* 
* */

/*
* 동기 同期 (Synchronous)
* 같을 동 기약할 기
* 동기적으로 실행되는 대화 = 말을 시작한 사람이 말을 끝내야 다른 사람이 말을 시작하고 끝낼 수 있음
* 동일한 (=같은) 사람이나 작업이 마지막을 기약
* 작업을 요청한 후 결과가 반환될 때 까지 기다리는 방식
* 
* 요청한 작업이 완료될 때 까지 다음 작업이 시작되지 않음
* 단순하고 이해하기 쉬움, 하지만 시간이 오래 걸리는 작업에서 효율이 떨어질 수 있음
* 호출한 쪽은 결과를 기다려야 하므로 작업이 순차적으로 실행
* 예 ) 은행에서 번호표를 뽑고 창구에서 기다리는 것 ( 이전 고객이 끝나야 내 차례가 옴)
*
* 비동기 (非同期 = ASynchronous)
* 아닐 비 같을 동 기약할 기
* 같은 시점이 아닌 서로 독립적으로 실행되는 것을 의미
* 비동기적으로 실행되는 대화 : 여러 사람이 서로 다른 이야기를 하며 대화가 겹치는 상황
* 작업을 요청한 것과 별개로 다른 작업이 진행되는 방식
* 
* 작업이 완료되면 알림을 통해 결과를 전달받음 * 알림 : 콜백 이벤트
* 호출한 쪽은 작업이 끝날 때까지 기다리지 않아도 되므로 병렬 처리 가능
* 효율적이지만 구조가 복잡해질 수 있음
* 예 ) 음식점에서 음식을 주문한 뒤, 음식을 기다리지 않고 대화를 하거나 다른 일을 하다가 음식이 나오면 가져오는 것
* */
public class IoEx {
}
